{
  "name": "Mcore3",
  "tagline": "基于 virtual-dom diff 实现的MVC 框架 （ IE8 支持 ）",
  "body": "````_**********_`______________`_**********_````\r\n## mcore\r\n\r\n- MVC 框架 [Based on MVC Architecture]\r\n- 模板渲染基于 virtual-dom diff 实现， 只更新需要变更的 DOM [Template rendering is based on Virtual-Dom diff. Only update the DOM that needs to be updated]\r\n- 模板不需要像 react 那样用 JSX； 跟原来一样， 写 html 就行了 [Unlike ReactJS, templates don't need JSX. We can just write html as usual]\r\n- 模板中的 DIY tag 就是一个 Components， 实现组件化非常方便 [The DIY tag in template is a Components, so it's easy to achieve modular]\r\n- 每一个 DIY tag 是一个 “独立空间”， 子节点不参于 diff. 所以，你可以很方便的， 在 DIY tag 里，使用 jQuery 的插件 [Each DIY tag is like a independent space, child node doesn't involve in diff. So, you can easily use jQuery plugin in the DIY tag]\r\n\r\n## Getting started\r\n\r\n### Install mcore-cli\r\n\r\n```\r\nnpm i -g yarn\r\nyarn global add mcore-cli\r\nmkdir mcore-app\r\ncd mcore-app\r\nmcore-cli --init ./\r\nyarn\r\nnpm run dev\r\n```\r\n\r\n## MOVING PARTS\r\n\r\n- [Binders](#binders)\r\n- [Formatters](#formatters)\r\n- [Components](#components)\r\n- [View](#view)\r\n- [Route](#route)\r\n- [App](#app)\r\n- [Middleware](#middleware)\r\n\r\n## Binders\r\n\r\nDescribe how your underlying data is reflected in the DOM and vice-versa. All binders create a binding that is automatically updated when model data changes or when the user interacts with the DOM.\r\n\r\n### html\r\n\r\nSets the element's HTML content.\r\n\r\n```html\r\n<section mc-html=\"scope.item.summary\"></section>\r\n\r\n```\r\n\r\n### show\r\n\r\nShows the element when the value evaluates to true and hides the element when the value evaluates to false.\r\n\r\n```html\r\n<button mc-show=\"scope.user.admin\">Remove</button>\r\n<button mc-show=\"scope.user.ix > 0\">Remove</button>\r\n```\r\n\r\n### hide\r\n\r\nHides the element when the value evaluates to true and shows the element when the value evaluates to false.\r\n\r\n```html\r\n<section mc-hide=\"scope.feature.disabled\"></section>\r\n```\r\n\r\n### if\r\n\r\nInserts and binds the element as well as it's child nodes into the DOM when the value evaluates to true and removes the element when the value evaluates to false.\r\n\r\n```html\r\n<section mc-if=\"scope.item.editable\"></section>\r\n<section mc-if=\"scope.item.editable || scope.item.ix > 0\"></section>\r\n<section mc-if=\"scope.item.editable && scope.item.ix != 0\"></section>\r\n<section mc-if=\"(scope.item.editable && scope.item.ix != 0) || scope.show\"></section>\r\n```\r\n\r\n### for\r\n\r\nEach Array or Object\r\n\r\n```html\r\n<ul>\r\n    <li mc-for=\"v in scope.arrayData\">\r\n        {v}\r\n    </li>\r\n    <li mc-for=\"v, i in scope.arrayData\">\r\n        {v} index: {i}\r\n    </li>\r\n\r\n    <li mc-for=\"v of scope.objectData\">\r\n        {v}\r\n    </li>\r\n\r\n    <li mc-for=\"v, key of scope.objectData\">\r\n        {v} key: {key}\r\n    </li>\r\n\r\n    <li mc-for=\"v in (scope.arrayData || scope.otherData)\">\r\n        {v}\r\n    </li>\r\n</ul>\r\n```\r\n\r\n### on-[event]\r\n\r\nBinds an event listener on the element using the event specified in [event]\r\n\r\n> 注： callback 至小有二个参数， 参数1: event 参数2: element (跟 jQuery 的事件回调参数一样)\r\n\r\n```html\r\n<button mc-on-click=\"edit\">Remove</button>\r\n```\r\n\r\n在事件中，传递上下文\r\n\r\n```html\r\n<div mc-for=\"v, i in scope.list\">\r\n    <span mc-on-click=\"show(v, i)\">{v.title}</span>\r\n</div>\r\n```\r\n\r\n```js\r\nclass Edit extends mcore.Veiw {\r\n    show(event, el, v, i){\r\n        console.log(v, i);\r\n    }\r\n}\r\n```\r\n\r\n### class-[classname]\r\n> version added: 3.0\r\n\r\nAdds a class (whatever value is in place of [classname]) on the element when the value evaluates to true and removes that class if the value evaluates to false.\r\n\r\n```html\r\n<li mc-class-completed=\"scope.todo.done\">{ scope.todo.name }</li>\r\n```\r\n\r\n### [attribute]\r\n\r\nSets the value of an attribute (whatever value is in place of [attribute]) on the element.\r\n\r\nIf your binding declaration does not match any of the above routines, it will fallback to use this binding.\r\n\r\n```html\r\n<input type=\"text\" mc-placeholder=\"scope.field.placeholder\">\r\n```\r\n\r\n\r\n## Formatters\r\n\r\nFormatters are functions that mutate the incoming and/or outgoing value of a binding. You can use them to format dates, numbers, currencies, etc. and because they work in a similar fashion to the Unix pipeline, the output of each feeds directly as input to the next one, so you can stack as many of them together as you like.\r\n\r\n```js\r\nmcore.Template.formatters.date = (value)=>{\r\n    return moment(value).format('YYYY-MM-DD');\r\n};\r\n```\r\n\r\nFormatters are applied by piping them to binding declarations using | as a delimiter.\r\n\r\n```html\r\n<input mc-value=\"scope.startDate | date\" type=\"text\" />\r\n\r\n<span>{scope.startDate | date}</span>\r\n```\r\n\r\n### Formatter arguments\r\n\r\nFormatters can accept any number of arguments in the form of keypaths or primitives. Keypath arguments get observed and will recompute the binding when any intermediary key changes. A primitive can be a string, number, boolean, null or undefined.\r\n\r\n```html\r\n<span>{ scope.alarm.time | time scope.user.timezone 'hh:mm' }</span>\r\n```\r\n\r\nThe value of each argument in the binding declaration will be evaluated and passed into the formatter function as an additional argument.\r\n\r\n```js\r\nmcore.Template.formatters.time = (value, timezone, format)=>{\r\n    return moment(value).tz(timezone).format(format);\r\n};\r\n```\r\n\r\n## Components\r\n\r\nComponents let you define reusable views that can be used within any of your templates. For some perspective on where components fit into your templates in relation to binders; binders define custom attributes, while components define custom elements.\r\n\r\n```html\r\n<!-- time.html -->\r\n<span>{scope.time}</span>\r\n```\r\n\r\n```js\r\nexport default class Time extends mcore.Component {\r\n    init(){\r\n        this.render(require('time.html'),{\r\n            time: new Date()\r\n        });\r\n\r\n        setInterval(()=>{\r\n            this.scope.time = new Date();\r\n        }, 1000);\r\n    }\r\n}\r\nmcore.Template.components.time = Time;\r\n```\r\n\r\nUse Components\r\n\r\n```html\r\n<time></time>\r\n```\r\n\r\n## View\r\n> extends Components\r\n\r\n```html\r\n<!-- home.html -->\r\n<h1> Hello {scope.name} !</h1>\r\n```\r\n\r\n```js\r\nexport default class Home extends mcore.View {\r\n    run(){\r\n        this.render(require('home.html'), {\r\n            name: 'freddy'\r\n        });\r\n    }\r\n}\r\n```\r\n\r\n## Route\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}